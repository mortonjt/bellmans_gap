This file will give you an overview of the GAP-C project.
If you have questions feel free contact me at: tgatter(at)cebitec.uni-bielefeld.de

---------- FOLDERS ---------- 

- librna: sources of the lib rna library
- m4: autoconf configuration files
- makefiles: additional makefiles
- rtlib: sources of the rt library
- testdata: files for testing, tests will only work with additional files of the test-suite
- src: the sources of GAP-C

---------- ORGANIZATION OF THE SOURCE DIRECTOR ---------- 

Some unimportant files are left out.

+-- src
|--- +-- ambiguity_cfg_gen: extension from "Generative Erweiterungen des Bellman's-GAP-Compilers [Extensions to Bellman's GAP compiler] (Diploma thesis Marco Rüther)"
|--- +-- cfg: extension from "Generative Erweiterungen des Bellman's-GAP-Compilers [Extensions to Bellman's GAP compiler] (Diploma thesis Marco Rüther)"
|--- +-- printer: extension from "Generative Erweiterungen des Bellman's-GAP-Compilers [Extensions to Bellman's GAP compiler] (Diploma thesis Marco Rüther)"
|--- +-- specialize_grammar: extension from "Generative Erweiterungen des Bellman's-GAP-Compilers [Extensions to Bellman's GAP compiler] (Diploma thesis Marco Rüther)"
|--- +-- util: extension from "Generative Erweiterungen des Bellman's-GAP-Compilers [Extensions to Bellman's GAP compiler] (Diploma thesis Marco Rüther)"


|--- +-- expr: Expressions (code elements returning a value) representing later codelines/parts of code lines,  most classes are define in the expr.cc/.hh directly under src/
     |------- base: base classes
     |------- fn_call: custom function calls to RTLIB, enum in hh, to string in cc
     |------- Vacc: Variable acess object for variable assignments

|--- +-- statement: objects representing later codelines (objects), most classes are define in the statement.cc/.hh directly under src/
     |------- backtrace_decl: backtrace objects
     |------- base: basic object classes
     |------- block_base: base class for objects that contain more statements
     |------- fn_call: calls to function within the same program and to RTLIB, enum in hh, to string in cc
     |------- hash_decl: hash objects to the use in classified dynamic programming
     |------- marker_decl: object used for classified backtracing
     |------- table_decl: representation of a parsing table
     |------- while: object representing a while loop

|--- +-- type: types for statements, expr and function to use (strong explicit typing)
     |------- backtrace: object class type of all backtracing variants
     |------- base: enums of all simple and complex types (Lists, Tuples, ints etc.)
     |------- multi: functions for complex types consiting of nested other types (mainly for tuples)

|--- adp_mode: enumerations for all ADP specialization options
|--- algebra: Object representations of algebras. New algebras are created as a binary tree for products. Functions are created out of the signature.
|--- alt: Alts represent alternatives of production rules (seperated by | in the grammar). Each non-terminal contains a list of alts. 
|--- args: Representing arguments passed to a function. This class is only used for signature definitions as they are typeless.
|--- ast: Root object of the AST. Most modifications and the code generation are started here. 
|--- backtrack: Standard backtracing, based on backtrack_base interface.
|--- backtrack_base: Interface for all backtracing definitions (backtrack, kbacktrack, subopt, subopt_marker).
|--- bool: interface for standard booleans. One of Georgs weird remnants.
|--- cc: a subset of the Printer interface to convert the AST to a string representation. CC is used for pretty printing code?
|--- char_visitor: Visitors loop over all functions and all rules of the grammer. char_visitor is used to detect the used alphabet.
|--- classify_visitor: Visitors loop over all functions and all rules of the grammer. classify_visitor only modifies non-terminals to include calls for classified dynamic programming using hashmaps.
|--- codegen: Object containing information for code generation. It does not generate code itself.
|--- const: Representation of constant expressions, such as numbers, booleans or strings.
|--- cpp: Full implementation of the printer interface. This converts the AST to c++ code, both for the header and the c file.
|--- dep_analysis: Table optimizations.
|--- driver: Driver is used for handling the Frontend (lexer etc.).
|--- expr: Class definitions using the interface of the expr/ subfolder. Expressions (code elements returning a value) represent later codelines/parts of code lines.
|--- filter: filter definitions for classified dynamic programming.
|--- fn_arg: Represents arguments of an algebra function, mostly used in alt.
|--- fn_decl: Raw function representation of code/signature/argument functions as generated by the Frontend.
|--- fn_def: Final code functions with all properties and statements. Code for product and signature functions is created here.
|--- gapc: Main class of the program. Main logic is in back() function.
|--- grammar: Top class of the grammar definitions.
|--- hashtable: Useless typename mapping from Georg.
|--- index_visitor: Visitors loop over all functions and all rules of the grammer. index_visitor is for pretty printing index definitions only.
|--- init_decls: Visitors loop over all functions and all rules of the grammer. init_decls initializes return values for all functions
|--- inline_nts: Visitors loop over all functions and all rules of the grammer. inline_nts mark function that can be inlined.
|--- input: Input generation options, to accept only DNA or vectors etc.
|--- instance: Defines a top level object managing the product definitions.
|--- kbacktrack:  Backtracing with co-optimals or Pareto optimization, based on backtrack_base interface.
|--- lexer: Auto generator lexer code. Look at .l for raw file.
|--- list_size_terminate: Visitors loop over all functions and all rules of the grammer. list_size_terminate sets list size related parser options.
|--- list_visitor: Visitors loop over all functions and all rules of the grammer. Pretty prints list definitions.
|--- list_warn: Visitors loop over all functions and all rules of the grammer. list_warn created warnings for based on problematic grammar definitions.
|--- loc, location: Auto generated parser code.
|--- log: Logging options.
|--- mode: Enums of grammar options.
|--- operator: Object to pass functions as paramaters, such as used in the specialized implementation.
|--- opt_choice_visitor: Visitors loop over all functions and all rules of the grammer. opt_choice_visitor call optimization in choice functions.
|--- options: Contains all command line options.
|--- para_decl: Objects describing typed function parameters, e.g. for fn_def.
|--- parser: Automatically create code of the parser to parse GAP-L. Look at .y for raw file.
|--- position: Automatically create code of the parser.
|--- prefix: Created during make to set install options.
|--- printer: Interface for all objects creating code/pretty print string representations of the AST.
|--- product: Represents an ADP products, e.g. Pareto products, lexicographic products etc. (Code generation of product functionality is in fn_def)
|--- runtime: Runtime optimization.
|--- signature: Representation of the signature, mostly for front end.
|--- stack: Automatically create code of the parser.
|--- statement: Class definitions using the interface of the statement/ subfolder. Objects representing later codelines (objects).
|--- subopt: Backtracing with list of suboptimals, based on backtrack_base interface.
|--- subopt: Backtracing with classified dynamic programming, based on backtrack_base interface.
|--- symbol: Representation of terminaly and non-terminals of the grammar.
|--- table: Table representations for code generation.
|--- tablegen: Create the table layout of the ADP problem.
|--- terminal: Initialized the standard tokens of Terminal definitions of GAP-L.
|--- tracks_visitor: Visitors loop over all functions and all rules of the grammer. Visitor to loop over multi track ADP definitions.
|--- type: Implementations of the type/ subfolder. Initialization of standard types ect.
|--- unused_visitor: Visitors loop over all functions and all rules of the grammer. Find unused/unreachable parts of the grammar.
|--- version: Version flag auto-generated by make.
|--- visitor: Interface for all visitors. Visitors loop over all functions and all rules of the grammer. 
|--- yielsize: Yield size definition and generation of the the grammer.

---------- RTLIB ---------- 

+-- rtlib

|--- +-- adp_specialization: contains the functionality of the specialized ADP definitions (Pareto eager and lexicographically sorted ADP)

|--- adp: Header for all headers needed by generated programs.
|--- algebra: basic algebra function such as sums, min, max, exp etc.
|--- asymptotics: Leftover for shape classification?
|--- backtrack: Implements backtrace objects.
|--- bench: event handler for debuggin
|--- bigint: refs to 64 bit integer definitions
|--- bitops: hash generator function
|--- cm_alph: RNA Pseudonot alphabet
|--- cstr: converts ints to str
|--- empty: test of various objects are empty
|--- erase: free memory for tuples
|--- filter: RNA baspairing function
|--- float_accuracy_operators: operator overrides for float comparison
|--- generic_main, generic_opts: copied main for all generated ADP programs.
|--- hash, hashlist, hash_stats, hashtng: custom hash implementations
|--- list: Function interfaces for lists and defintion of list objects.
|--- map_pool: alternative pool implementation
|--- move: copy tuples
|--- multipool: alternative pool implementation
|--- output: print tuples
|--- pareto_dom_sort: Functions of domination sorted Pareto
|--- pareto_yukish: Functions of Yukish Pareto implementation. Copy elements to intermediate lists.  
|--- pareto_yukish_ref: Functions of Yukish Pareto implementation. Reference elements by pointer lists.  
|--- pool: Memory management.
|--- push_back: optimized push_back functions for scoring lex products
|--- range: custom iterators to pass substructure lists.
|--- rational: exact multiprecision rational number type
|--- ref: Reference wrapper with reference counter for objects.
|--- rna: RNA comfort functions.
|--- rope: Special string datatype.
|--- rules: special holder for grammar rules, e.g. for thermodynamic matchers
|--- sample: for stochastic sampling
|--- sequence: Special holder for Sequences.
|--- shape_alph, shape: Shape class hash functionality.
|--- singleton: Singleton objects.
|--- string: Own String class.
|--- subopt: Suboptimal backtracing.
|--- subsequence: Retrieve elements of sequences.
|--- table: Parser tables.
|--- terminal: Terminal types.
|--- vector_sparse: Experimental sparse vector type.







