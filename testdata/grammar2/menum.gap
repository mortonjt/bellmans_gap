input <raw, raw>

signature Algebra(alphabet, answer) {
  answer root__global(answer);
  answer nil(<void, void>);
  answer S_0__IL_0(answer);
  answer S_0__IR_0(answer);
  answer S_0__B_1(answer);
  answer IL_0__IL_0(<alphabet, alphabet>, answer);
  answer IL_0__IR_0(<alphabet, alphabet>, answer);
  answer IL_0__B_1(<alphabet, alphabet>, answer);
  answer IR_0__IR_0(answer, <alphabet, alphabet>);
  answer IR_0__B_1(answer, <alphabet, alphabet>);
  answer B_1__S_2__S_6(answer, answer);
  answer S_2__MP_3(answer);
  answer S_2__ML_3(answer);
  answer S_2__MR_3(answer);
  answer S_2__D_3(answer);
  answer MP_3__IL_3(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_3__IR_3(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_3__MP_4(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_3__ML_4(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_3__MR_4(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_3__D_4(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer ML_3__IL_3(<alphabet, alphabet>, answer);
  answer ML_3__IR_3(<alphabet, alphabet>, answer);
  answer ML_3__MP_4(<alphabet, alphabet>, answer);
  answer ML_3__ML_4(<alphabet, alphabet>, answer);
  answer ML_3__MR_4(<alphabet, alphabet>, answer);
  answer ML_3__D_4(<alphabet, alphabet>, answer);
  answer MR_3__IL_3(answer, <alphabet, alphabet>);
  answer MR_3__IR_3(answer, <alphabet, alphabet>);
  answer MR_3__MP_4(answer, <alphabet, alphabet>);
  answer MR_3__ML_4(answer, <alphabet, alphabet>);
  answer MR_3__MR_4(answer, <alphabet, alphabet>);
  answer MR_3__D_4(answer, <alphabet, alphabet>);
  answer D_3__IL_3(answer);
  answer D_3__IR_3(answer);
  answer D_3__MP_4(answer);
  answer D_3__ML_4(answer);
  answer D_3__MR_4(answer);
  answer D_3__D_4(answer);
  answer IL_3__IL_3(<alphabet, alphabet>, answer);
  answer IL_3__IR_3(<alphabet, alphabet>, answer);
  answer IL_3__MP_4(<alphabet, alphabet>, answer);
  answer IL_3__ML_4(<alphabet, alphabet>, answer);
  answer IL_3__MR_4(<alphabet, alphabet>, answer);
  answer IL_3__D_4(<alphabet, alphabet>, answer);
  answer IR_3__IR_3(answer, <alphabet, alphabet>);
  answer IR_3__MP_4(answer, <alphabet, alphabet>);
  answer IR_3__ML_4(answer, <alphabet, alphabet>);
  answer IR_3__MR_4(answer, <alphabet, alphabet>);
  answer IR_3__D_4(answer, <alphabet, alphabet>);
  answer MP_4__IL_4(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_4__E_5(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer ML_4__IL_4(<alphabet, alphabet>, answer);
  answer ML_4__E_5(<alphabet, alphabet>, answer);
  answer MR_4__IL_4(answer, <alphabet, alphabet>);
  answer MR_4__E_5(answer, <alphabet, alphabet>);
  answer D_4__IL_4(answer);
  answer D_4__E_5(answer);
  answer IL_4__IL_4(<alphabet, alphabet>, answer);
  answer IL_4__E_5(<alphabet, alphabet>, answer);
  answer MP_7__IL_7(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_7__IR_7(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_7__MP_8(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_7__ML_8(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_7__MR_8(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_7__D_8(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer ML_7__IL_7(<alphabet, alphabet>, answer);
  answer ML_7__IR_7(<alphabet, alphabet>, answer);
  answer ML_7__MP_8(<alphabet, alphabet>, answer);
  answer ML_7__ML_8(<alphabet, alphabet>, answer);
  answer ML_7__MR_8(<alphabet, alphabet>, answer);
  answer ML_7__D_8(<alphabet, alphabet>, answer);
  answer MR_7__IL_7(answer, <alphabet, alphabet>);
  answer MR_7__IR_7(answer, <alphabet, alphabet>);
  answer MR_7__MP_8(answer, <alphabet, alphabet>);
  answer MR_7__ML_8(answer, <alphabet, alphabet>);
  answer MR_7__MR_8(answer, <alphabet, alphabet>);
  answer MR_7__D_8(answer, <alphabet, alphabet>);
  answer D_7__IL_7(answer);
  answer D_7__IR_7(answer);
  answer D_7__MP_8(answer);
  answer D_7__ML_8(answer);
  answer D_7__MR_8(answer);
  answer D_7__D_8(answer);
  answer IL_7__IL_7(<alphabet, alphabet>, answer);
  answer IL_7__IR_7(<alphabet, alphabet>, answer);
  answer IL_7__MP_8(<alphabet, alphabet>, answer);
  answer IL_7__ML_8(<alphabet, alphabet>, answer);
  answer IL_7__MR_8(<alphabet, alphabet>, answer);
  answer IL_7__D_8(<alphabet, alphabet>, answer);
  answer IR_7__IR_7(answer, <alphabet, alphabet>);
  answer IR_7__MP_8(answer, <alphabet, alphabet>);
  answer IR_7__ML_8(answer, <alphabet, alphabet>);
  answer IR_7__MR_8(answer, <alphabet, alphabet>);
  answer IR_7__D_8(answer, <alphabet, alphabet>);
  answer MP_8__IL_8(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_8__IR_8(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_8__ML_9(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer MP_8__D_9(<alphabet, alphabet>, answer, <alphabet, alphabet>);
  answer ML_8__IL_8(<alphabet, alphabet>, answer);
  answer ML_8__IR_8(<alphabet, alphabet>, answer);
  answer ML_8__ML_9(<alphabet, alphabet>, answer);
  answer ML_8__D_9(<alphabet, alphabet>, answer);
  answer MR_8__IL_8(answer, <alphabet, alphabet>);
  answer MR_8__IR_8(answer, <alphabet, alphabet>);
  answer MR_8__ML_9(answer, <alphabet, alphabet>);
  answer MR_8__D_9(answer, <alphabet, alphabet>);
  answer D_8__IL_8(answer);
  answer D_8__IR_8(answer);
  answer D_8__ML_9(answer);
  answer D_8__D_9(answer);
  answer IL_8__IL_8(<alphabet, alphabet>, answer);
  answer IL_8__IR_8(<alphabet, alphabet>, answer);
  answer IL_8__ML_9(<alphabet, alphabet>, answer);
  answer IL_8__D_9(<alphabet, alphabet>, answer);
  answer IR_8__IR_8(answer, <alphabet, alphabet>);
  answer IR_8__ML_9(answer, <alphabet, alphabet>);
  answer IR_8__D_9(answer, <alphabet, alphabet>);
  answer ML_9__IL_9(<alphabet, alphabet>, answer);
  answer ML_9__ML_10(<alphabet, alphabet>, answer);
  answer ML_9__D_10(<alphabet, alphabet>, answer);
  answer D_9__IL_9(answer);
  answer D_9__ML_10(answer);
  answer D_9__D_10(answer);
  answer IL_9__IL_9(<alphabet, alphabet>, answer);
  answer IL_9__ML_10(<alphabet, alphabet>, answer);
  answer IL_9__D_10(<alphabet, alphabet>, answer);
  answer ML_10__E_11(<alphabet, alphabet>, answer);
  answer D_10__E_11(answer);
  answer S_6__IL_6(answer);
  answer S_6__MP_7(answer);
  answer S_6__ML_7(answer);
  answer S_6__MR_7(answer);
  answer S_6__D_7(answer);
  answer IL_6__IL_6(<alphabet, alphabet>, answer);
  answer IL_6__MP_7(<alphabet, alphabet>, answer);
  answer IL_6__ML_7(<alphabet, alphabet>, answer);
  answer IL_6__MR_7(<alphabet, alphabet>, answer);
  answer IL_6__D_7(<alphabet, alphabet>, answer);
  choice [answer] h([answer]);
}

algebra count auto count;

algebra enum auto enum;

grammar cm uses Algebra(axiom = root) {
  root = root__global(S_0 with <minsize(1), minsize(1)>) # h;
  S_0 = S_0__IL_0(IL_0) | S_0__IR_0(IR_0) | S_0__B_1(B_1) # h;
  IL_0 = IL_0__IL_0(<CHAR, CHAR>, IL_0) | IL_0__IR_0(<CHAR, CHAR>, IR_0) | IL_0__B_1(<CHAR, CHAR>, B_1) # h;
  IR_0 = IR_0__IR_0(IR_0, <CHAR, CHAR>) | IR_0__B_1(B_1, <CHAR, CHAR>) # h;
  B_1 = B_1__S_2__S_6(S_2,S_6) # h;
  S_2 = S_2__MP_3(MP_3) | S_2__ML_3(ML_3) | S_2__MR_3(MR_3) | S_2__D_3(D_3) # h;
  MP_3 = MP_3__IL_3(<CHAR, CHAR>, IL_3, <CHAR, CHAR>) | MP_3__IR_3(<CHAR, CHAR>, IR_3, <CHAR, CHAR>) | MP_3__MP_4(<CHAR, CHAR>, MP_4, <CHAR, CHAR>) | MP_3__ML_4(<CHAR, CHAR>, ML_4, <CHAR, CHAR>) | MP_3__MR_4(<CHAR, CHAR>, MR_4, <CHAR, CHAR>) | MP_3__D_4(<CHAR, CHAR>, D_4, <CHAR, CHAR>) # h;
  ML_3 = ML_3__IL_3(<CHAR, CHAR>, IL_3) | ML_3__IR_3(<CHAR, CHAR>, IR_3) | ML_3__MP_4(<CHAR, CHAR>, MP_4) | ML_3__ML_4(<CHAR, CHAR>, ML_4) | ML_3__MR_4(<CHAR, CHAR>, MR_4) | ML_3__D_4(<CHAR, CHAR>, D_4) # h;
  MR_3 = MR_3__IL_3(IL_3, <CHAR, CHAR>) | MR_3__IR_3(IR_3, <CHAR, CHAR>) | MR_3__MP_4(MP_4, <CHAR, CHAR>) | MR_3__ML_4(ML_4, <CHAR, CHAR>) | MR_3__MR_4(MR_4, <CHAR, CHAR>) | MR_3__D_4(D_4, <CHAR, CHAR>) # h;
  D_3 = D_3__IL_3(IL_3) | D_3__IR_3(IR_3) | D_3__MP_4(MP_4) | D_3__ML_4(ML_4) | D_3__MR_4(MR_4) | D_3__D_4(D_4) # h;
  IL_3 = IL_3__IL_3(<CHAR, CHAR>, IL_3) | IL_3__IR_3(<CHAR, CHAR>, IR_3) | IL_3__MP_4(<CHAR, CHAR>, MP_4) | IL_3__ML_4(<CHAR, CHAR>, ML_4) | IL_3__MR_4(<CHAR, CHAR>, MR_4) | IL_3__D_4(<CHAR, CHAR>, D_4) # h;
  IR_3 = IR_3__IR_3(IR_3, <CHAR, CHAR>) | IR_3__MP_4(MP_4, <CHAR, CHAR>) | IR_3__ML_4(ML_4, <CHAR, CHAR>) | IR_3__MR_4(MR_4, <CHAR, CHAR>) | IR_3__D_4(D_4, <CHAR, CHAR>) # h;
  MP_4 = MP_4__IL_4(<CHAR, CHAR>, IL_4, <CHAR, CHAR>) | MP_4__E_5(<CHAR, CHAR>, E_5, <CHAR, CHAR>) # h;
  ML_4 = ML_4__IL_4(<CHAR, CHAR>, IL_4) | ML_4__E_5(<CHAR, CHAR>, E_5) # h;
  MR_4 = MR_4__IL_4(IL_4, <CHAR, CHAR>) | MR_4__E_5(E_5, <CHAR, CHAR>) # h;
  D_4 = D_4__IL_4(IL_4) | D_4__E_5(E_5) # h;
  IL_4 = IL_4__IL_4(<CHAR, CHAR>, IL_4) | IL_4__E_5(<CHAR, CHAR>, E_5) # h;
  E_5 = nil(<EMPTY, EMPTY>) # h;
  MP_7 = MP_7__IL_7(<CHAR, CHAR>, IL_7, <CHAR, CHAR>) | MP_7__IR_7(<CHAR, CHAR>, IR_7, <CHAR, CHAR>) | MP_7__MP_8(<CHAR, CHAR>, MP_8, <CHAR, CHAR>) | MP_7__ML_8(<CHAR, CHAR>, ML_8, <CHAR, CHAR>) | MP_7__MR_8(<CHAR, CHAR>, MR_8, <CHAR, CHAR>) | MP_7__D_8(<CHAR, CHAR>, D_8, <CHAR, CHAR>) # h;
  ML_7 = ML_7__IL_7(<CHAR, CHAR>, IL_7) | ML_7__IR_7(<CHAR, CHAR>, IR_7) | ML_7__MP_8(<CHAR, CHAR>, MP_8) | ML_7__ML_8(<CHAR, CHAR>, ML_8) | ML_7__MR_8(<CHAR, CHAR>, MR_8) | ML_7__D_8(<CHAR, CHAR>, D_8) # h;
  MR_7 = MR_7__IL_7(IL_7, <CHAR, CHAR>) | MR_7__IR_7(IR_7, <CHAR, CHAR>) | MR_7__MP_8(MP_8, <CHAR, CHAR>) | MR_7__ML_8(ML_8, <CHAR, CHAR>) | MR_7__MR_8(MR_8, <CHAR, CHAR>) | MR_7__D_8(D_8, <CHAR, CHAR>) # h;
  D_7 = D_7__IL_7(IL_7) | D_7__IR_7(IR_7) | D_7__MP_8(MP_8) | D_7__ML_8(ML_8) | D_7__MR_8(MR_8) | D_7__D_8(D_8) # h;
  IL_7 = IL_7__IL_7(<CHAR, CHAR>, IL_7) | IL_7__IR_7(<CHAR, CHAR>, IR_7) | IL_7__MP_8(<CHAR, CHAR>, MP_8) | IL_7__ML_8(<CHAR, CHAR>, ML_8) | IL_7__MR_8(<CHAR, CHAR>, MR_8) | IL_7__D_8(<CHAR, CHAR>, D_8) # h;
  IR_7 = IR_7__IR_7(IR_7, <CHAR, CHAR>) | IR_7__MP_8(MP_8, <CHAR, CHAR>) | IR_7__ML_8(ML_8, <CHAR, CHAR>) | IR_7__MR_8(MR_8, <CHAR, CHAR>) | IR_7__D_8(D_8, <CHAR, CHAR>) # h;
  MP_8 = MP_8__IL_8(<CHAR, CHAR>, IL_8, <CHAR, CHAR>) | MP_8__IR_8(<CHAR, CHAR>, IR_8, <CHAR, CHAR>) | MP_8__ML_9(<CHAR, CHAR>, ML_9, <CHAR, CHAR>) | MP_8__D_9(<CHAR, CHAR>, D_9, <CHAR, CHAR>) # h;
  ML_8 = ML_8__IL_8(<CHAR, CHAR>, IL_8) | ML_8__IR_8(<CHAR, CHAR>, IR_8) | ML_8__ML_9(<CHAR, CHAR>, ML_9) | ML_8__D_9(<CHAR, CHAR>, D_9) # h;
  MR_8 = MR_8__IL_8(IL_8, <CHAR, CHAR>) | MR_8__IR_8(IR_8, <CHAR, CHAR>) | MR_8__ML_9(ML_9, <CHAR, CHAR>) | MR_8__D_9(D_9, <CHAR, CHAR>) # h;
  D_8 = D_8__IL_8(IL_8) | D_8__IR_8(IR_8) | D_8__ML_9(ML_9) | D_8__D_9(D_9) # h;
  IL_8 = IL_8__IL_8(<CHAR, CHAR>, IL_8) | IL_8__IR_8(<CHAR, CHAR>, IR_8) | IL_8__ML_9(<CHAR, CHAR>, ML_9) | IL_8__D_9(<CHAR, CHAR>, D_9) # h;
  IR_8 = IR_8__IR_8(IR_8, <CHAR, CHAR>) | IR_8__ML_9(ML_9, <CHAR, CHAR>) | IR_8__D_9(D_9, <CHAR, CHAR>) # h;
  ML_9 = ML_9__IL_9(<CHAR, CHAR>, IL_9) | ML_9__ML_10(<CHAR, CHAR>, ML_10) | ML_9__D_10(<CHAR, CHAR>, D_10) # h;
  D_9 = D_9__IL_9(IL_9) | D_9__ML_10(ML_10) | D_9__D_10(D_10) # h;
  IL_9 = IL_9__IL_9(<CHAR, CHAR>, IL_9) | IL_9__ML_10(<CHAR, CHAR>, ML_10) | IL_9__D_10(<CHAR, CHAR>, D_10) # h;
  ML_10 = ML_10__E_11(<CHAR, CHAR>, E_11) # h;
  D_10 = D_10__E_11(E_11) # h;
  E_11 = nil(<EMPTY, EMPTY>) # h;
  S_6 = S_6__IL_6(IL_6) | S_6__MP_7(MP_7) | S_6__ML_7(ML_7) | S_6__MR_7(MR_7) | S_6__D_7(D_7) # h;
  IL_6 = IL_6__IL_6(<CHAR, CHAR>, IL_6) | IL_6__MP_7(<CHAR, CHAR>, MP_7) | IL_6__ML_7(<CHAR, CHAR>, ML_7) | IL_6__MR_7(<CHAR, CHAR>, MR_7) | IL_6__D_7(<CHAR, CHAR>, D_7) # h;
}

instance count = cm(count);
instance enumi = cm(enum);
